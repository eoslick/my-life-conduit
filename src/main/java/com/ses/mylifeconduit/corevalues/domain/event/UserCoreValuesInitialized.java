package com.ses.mylifeconduit.corevalues.domain.event;

import com.ses.mylifeconduit.core.ddd.DomainEvent;
import com.ses.mylifeconduit.core.tenant.TenantId;
import com.ses.mylifeconduit.core.user.UserId; // The aggregate ID is UserId

import java.time.Instant;
import java.util.Objects;
import java.util.UUID;

/**
 * Event indicating that the UserCoreValues aggregate has been initialized for a user.
 */
public record UserCoreValuesInitialized(
        UUID eventId,
        UserId aggregateId, // Specific ID type for this aggregate
        TenantId tenantId,
        long aggregateVersion,
        Instant occurredOn
) implements DomainEvent {

    public static final String EVENT_VERSION = "V1";

    /**
     * Canonical constructor validating inputs.
     */
    public UserCoreValuesInitialized {
        Objects.requireNonNull(eventId, "eventId cannot be null");
        Objects.requireNonNull(aggregateId, "aggregateId cannot be null");
        Objects.requireNonNull(tenantId, "tenantId cannot be null");
        if (aggregateVersion <= 0) throw new IllegalArgumentException("aggregateVersion must be positive");
        Objects.requireNonNull(occurredOn, "occurredOn cannot be null");
    }

    @Override
    public String eventVersion() {
        return EVENT_VERSION;
    }
    // equals, hashCode, toString are generated by the record
}