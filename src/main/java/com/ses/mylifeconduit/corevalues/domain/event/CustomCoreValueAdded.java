package com.ses.mylifeconduit.corevalues.domain.event;

import com.ses.mylifeconduit.core.ddd.DomainEvent;
import com.ses.mylifeconduit.core.tenant.TenantId;
import com.ses.mylifeconduit.core.user.UserId;
import com.ses.mylifeconduit.corevalues.domain.vo.CoreValueId;   // Import Value Objects
import com.ses.mylifeconduit.corevalues.domain.vo.CoreValueText; // Import Value Objects

import java.time.Instant;
import java.util.Objects;
import java.util.UUID;

/**
 * Event indicating a new custom core value definition was added for the user.
 */
public record CustomCoreValueAdded(
        UUID eventId,
        UserId aggregateId,
        TenantId tenantId,
        long aggregateVersion,
        Instant occurredOn,
        // Event specific payload:
        CoreValueId coreValueId,
        CoreValueText coreValueText
) implements DomainEvent {

    public static final String EVENT_VERSION = "V1";

    /**
     * Canonical constructor validating inputs.
     */
    public CustomCoreValueAdded {
        Objects.requireNonNull(eventId, "eventId cannot be null");
        Objects.requireNonNull(aggregateId, "aggregateId cannot be null");
        Objects.requireNonNull(tenantId, "tenantId cannot be null");
        if (aggregateVersion <= 0) throw new IllegalArgumentException("aggregateVersion must be positive");
        Objects.requireNonNull(occurredOn, "occurredOn cannot be null");
        Objects.requireNonNull(coreValueId, "coreValueId cannot be null");
        Objects.requireNonNull(coreValueText, "coreValueText cannot be null");
    }

    @Override
    public String eventVersion() {
        return EVENT_VERSION;
    }
    // equals, hashCode, toString are generated by the record
}