package com.ses.mylifeconduit.core.security.keys;

import com.ses.mylifeconduit.core.ddd.EntityId;

import java.util.Objects;
import java.util.UUID;

/**
 * Represents the strongly-typed identifier for a Share Grant persistence record.
 * Wraps a {@link UUID}.
 */
public record ShareGrantId(UUID value) implements EntityId {

    /**
     * Creates a new ShareGrantId with the specified UUID value.
     *
     * @param value The UUID value. Cannot be null.
     * @throws NullPointerException if value is null.
     */
    public ShareGrantId {
        Objects.requireNonNull(value, "ShareGrantId value cannot be null");
    }

    /**
     * Creates a new ShareGrantId with a randomly generated UUID.
     *
     * @return A new ShareGrantId instance.
     */
    public static ShareGrantId generate() {
        return new ShareGrantId(UUID.randomUUID());
    }

    /**
     * Creates a ShareGrantId from a string representation of a UUID.
     *
     * @param uuidString The string representation of the UUID. Cannot be null.
     * @return A ShareGrantId instance.
     * @throws NullPointerException if uuidString is null.
     * @throws IllegalArgumentException if the string is not a valid UUID representation.
     */
    public static ShareGrantId fromString(String uuidString) {
        Objects.requireNonNull(uuidString, "UUID string cannot be null");
        return new ShareGrantId(UUID.fromString(uuidString));
    }

    /**
     * Returns the underlying UUID value.
     * Required by the EntityId interface contract.
     *
     * @return The UUID value.
     */
    @Override
    public UUID value() {
        return value;
    }

    @Override
    public String toString() {
        // Default record toString is fine, but explicitly using value() can be clearer
        return value.toString();
    }

    // equals() and hashCode() are automatically generated by the record based on the 'value' field.
}