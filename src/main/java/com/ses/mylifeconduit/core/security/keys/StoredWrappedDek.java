// --- File: src/main/java/com/ses/mylifeconduit/core/security/keys/StoredWrappedDek.java ---
package com.ses.mylifeconduit.core.security.keys;

// Import the new DekId
import com.ses.mylifeconduit.core.tenant.TenantId;
import com.ses.mylifeconduit.core.user.UserId;
import com.ses.mylifeconduit.core.ddd.ValueObject; // Ensure ValueObject interface is in core.ddd

import java.time.Instant;
import java.util.Arrays;
import java.util.Objects;
import java.util.UUID;

/**
 * Represents the persisted information for a specific owner's Data Encryption Key (DEK).
 *
 * @param dekId        The unique identifier for this DEK instance. <<< CHANGED TYPE
 * @param ownerUserId  The user who owns this specific DEK.
 * @param tenantId     The tenant context.
 * @param wrappedDek   The DEK bytes, wrapped using the owner's primary user key.
 * @param ownerKeyId   The identifier of the owner's User Key used for wrapping this DEK.
 * @param algorithmId  The algorithm used for wrapping.
 * @param createdAt    Timestamp when this DEK record was created.
 */
public record StoredWrappedDek(
        DekId dekId, // <<< CHANGED TYPE from UUID
        UserId ownerUserId,
        TenantId tenantId,
        byte[] wrappedDek,
        String ownerKeyId,
        String algorithmId,
        Instant createdAt
) implements ValueObject { // Corrected interface path if needed

    public StoredWrappedDek { // Basic validation
        Objects.requireNonNull(dekId, "dekId cannot be null"); // <<< Use new field name/type
        Objects.requireNonNull(ownerUserId, "ownerUserId cannot be null");
        Objects.requireNonNull(tenantId, "tenantId cannot be null");
        Objects.requireNonNull(wrappedDek, "wrappedDek cannot be null");
        Objects.requireNonNull(ownerKeyId, "ownerKeyId cannot be null");
        Objects.requireNonNull(algorithmId, "algorithmId cannot be null");
        Objects.requireNonNull(createdAt, "createdAt cannot be null");

        // Defensive copy remains the same
        wrappedDek = Arrays.copyOf(wrappedDek, wrappedDek.length);
    }

    // Getter remains the same conceptually, but refers to the validated field
    public byte[] wrappedDek() {
        return Arrays.copyOf(wrappedDek, wrappedDek.length);
    }

    // equals, hashCode generated by record handle the type change automatically.

    // Override toString to hide key
    @Override
    public String toString() {
        return "StoredWrappedDek{" +
                "dekId=" + dekId + // <<< Use new field
                ", ownerUserId=" + ownerUserId +
                ", tenantId=" + tenantId +
                ", wrappedDek=[PROTECTED]" +
                ", ownerKeyId='" + ownerKeyId + '\'' +
                ", algorithmId='" + algorithmId + '\'' +
                ", createdAt=" + createdAt +
                '}';
    }
}
// --- End File: src/main/java/com/ses/mylifeconduit/core/security/keys/StoredWrappedDek.java ---