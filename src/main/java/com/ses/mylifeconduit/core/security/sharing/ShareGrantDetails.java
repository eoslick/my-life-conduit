package com.ses.mylifeconduit.core.security.sharing;

import com.ses.mylifeconduit.core.tenant.TenantId;
import com.ses.mylifeconduit.core.user.UserId;
import com.ses.mylifeconduit.core.security.keys.ShareGrantId; // <<< Import the new type

import java.time.Instant;
import java.util.Objects;
import java.util.UUID;

/**
 * A Value Object holding details required to create, manage, or resolve a data share grant.
 * (Uses strongly-typed ShareGrantId).
 *
 * @param ownerUserId      The user who originally owns the data being shared.
 * @param dataReference    A string identifying the data being shared.
 * @param granteeType      The type of the entity being granted access (USER, ROLE, TENANT).
 * @param granteeId        The identifier of the grantee.
 * @param expiration       The timestamp when the share expires (null for permanent).
 * @param shareGrantId     A unique identifier for this specific share grant instance (optional, can be null on creation). <<< CHANGED TYPE
 */
public record ShareGrantDetails(
        UserId ownerUserId,
        String dataReference,
        GranteeType granteeType,
        String granteeId,
        Instant expiration,
        ShareGrantId shareGrantId // <<< CHANGED TYPE (nullable)
) {
    public ShareGrantDetails {
        Objects.requireNonNull(ownerUserId, "ownerUserId cannot be null");
        Objects.requireNonNull(dataReference, "dataReference cannot be null");
        Objects.requireNonNull(granteeType, "granteeType cannot be null");
        Objects.requireNonNull(granteeId, "granteeId cannot be null");
        // expiration can be null
        // shareGrantId can be null <<< Validation remains the same (null allowed)
    }

    // equals, hashCode, toString generated by record handle the change
}