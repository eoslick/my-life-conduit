package com.ses.mylifeconduit.core.security.keys;

import com.ses.mylifeconduit.core.ddd.ValueObject; // Mark as a Value Object

import java.util.Arrays;
import java.util.Objects;

/**
 * Represents the persisted information for a user's wrapped data encryption key.
 * This record acts as a data transfer object between the KeyRepository and KeyManagementService.
 *
 * @param wrappedKey    The user's data key, encrypted (wrapped) by a Tenant Master Key.
 * @param masterKeyId   The identifier of the Tenant Master Key used for wrapping.
 * @param algorithmId   The identifier of the algorithm used to wrap the key.
 */
public record StoredUserKey(
        byte[] wrappedKey,
        String masterKeyId,
        String algorithmId
) implements ValueObject { // Implement ValueObject marker interface

    /**
     * Canonical constructor with validation and defensive copying.
     */
    public StoredUserKey {
        Objects.requireNonNull(wrappedKey, "wrappedKey cannot be null");
        Objects.requireNonNull(masterKeyId, "masterKeyId cannot be null or empty");
        Objects.requireNonNull(algorithmId, "algorithmId cannot be null or empty");
        if (masterKeyId.isBlank()) throw new IllegalArgumentException("masterKeyId cannot be blank");
        if (algorithmId.isBlank()) throw new IllegalArgumentException("algorithmId cannot be blank");

        // Defensive copy to ensure immutability of the byte array content
        wrappedKey = Arrays.copyOf(wrappedKey, wrappedKey.length);
    }

    /**
     * Returns a defensive copy of the wrapped key bytes.
     *
     * @return A copy of the wrapped key byte array.
     */
    public byte[] wrappedKey() {
        return Arrays.copyOf(wrappedKey, wrappedKey.length);
    }

    // equals, hashCode, and toString are generated by the record.
    // Override equals and hashCode to ensure proper comparison of byte array content.

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        StoredUserKey that = (StoredUserKey) o;
        return Arrays.equals(wrappedKey, that.wrappedKey) &&
                Objects.equals(masterKeyId, that.masterKeyId) &&
                Objects.equals(algorithmId, that.algorithmId);
    }

    @Override
    public int hashCode() {
        int result = Objects.hash(masterKeyId, algorithmId);
        result = 31 * result + Arrays.hashCode(wrappedKey);
        return result;
    }

    /**
     * Override toString for security (avoid logging raw key bytes).
     */
    @Override
    public String toString() {
        return "StoredUserKey{" +
                "wrappedKey=[PROTECTED]" +
                ", masterKeyId='" + masterKeyId + '\'' +
                ", algorithmId='" + algorithmId + '\'' +
                '}';
    }
}