// src/main/java/com/ses/mylifeconduit/core/ddd/PlaceholderEvent.java
package com.ses.mylifeconduit.core.ddd;

import com.ses.mylifeconduit.core.tenant.TenantId;
import com.ses.mylifeconduit.core.user.UserId; // Assuming user initiated it

import java.time.Instant;
import java.util.UUID;

/**
 * A placeholder Domain Event to satisfy the sealed interface requirement during initial setup.
 * This event doesn't represent a real domain concept and should be removed or replaced later.
 * <p>
 * IMPORTANT: Remember to add actual domain event classes to the 'permits' clause
 * of the DomainEvent interface as they are created.
 */
public record PlaceholderEvent(
        UUID eventId,
        EntityId aggregateId, // Use a generic EntityId or a specific placeholder ID type if needed
        TenantId tenantId,
        long aggregateVersion,
        Instant occurredOn,
        UserId userId // Add relevant fields needed by constructor/logic if any
        // Add other fields as necessary to represent a minimal event
) implements DomainEvent {

    // Provide a static factory or constructor for convenience if needed elsewhere
    public static PlaceholderEvent create(EntityId aggregateId, TenantId tenantId, long version, UserId userId) {
        return new PlaceholderEvent(
                UUID.randomUUID(),
                aggregateId,
                tenantId,
                version,
                Instant.now(),
                userId
        );
    }

    @Override
    public String eventVersion() {
        // Return a placeholder version
        return "V0";
    }

    // equals, hashCode, toString are automatically generated by the record
}